"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Log = /** @class */ (function () {
    function Log(options) {
        var _this = this;
        this.options = options;
        /**
         * middleware
         */
        this.middleware = function () {
            return function (req, res, next) {
                /**
                 * @Description all response fuctionality is here.
                 */
                var authHeader = req.headers.authorization;
                var method = req.method;
                var path = req.path;
                var statuscode = res.statusCode;
                /**
                 * purpose condition
                 */
                var isOrigin = _this.origin
                    ? req.headers.origin
                    : undefined;
                var isHeader = _this.showHeader
                    ? authHeader
                    : undefined;
                var isPurpose = _this.purpose
                    ? "\uD83D\uDE80 ".concat(_this.purpose)
                    : undefined;
                /**
                 * logging...
                 */
                var logMessage = [
                    "\x1b[31m============== dev-http-logger ===============\x1b[31m",
                    isPurpose || isOrigin || isHeader
                        ? "\u001B[35m".concat(isPurpose || isOrigin || isHeader, "\u001B[35m")
                        : "",
                    "\u001B[37m".concat(method, "\u001B[37m \u001B[33m").concat(path, "\u001B[33m \u001B[36m").concat(statuscode, "\u001B[0m"),
                    "\x1b[31m============== dev-http-logger ===============\x1b[31m",
                ]
                    .filter(Boolean)
                    .join("\n");
                console.log(logMessage);
                next();
            };
        };
        this.origin = options === null || options === void 0 ? void 0 : options.origin;
        this.showHeader = options === null || options === void 0 ? void 0 : options.showHeader;
        this.purpose = options === null || options === void 0 ? void 0 : options.purpose;
    }
    return Log;
}());
var logger = function (options) {
    var log = new Log(options);
    return log.middleware();
};
exports.default = logger;
